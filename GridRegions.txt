import java.util.Scanner;

public class Solution {
	static final int[] R_OFFSETS = { -1, -1, 0, 1, 1, 1, 0, -1 };
	static final int[] C_OFFSETS = { 0, 1, 1, 1, 0, -1, -1, -1 };

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

        //creating the matrix using input
		int n = sc.nextInt();
		int m = sc.nextInt();
		int[][] matrix = new int[n][m];
		for (int r = 0; r < matrix.length; r++) {
			for (int c = 0; c < matrix[0].length; c++) {
				matrix[r][c] = sc.nextInt();
			}
		}

		boolean[][] visited = new boolean[n][m];
		int maxRegion = 0;
		for (int r = 0; r < matrix.length; r++) {
			for (int c = 0; c < matrix[0].length; c++) {
				if (!visited[r][c] && matrix[r][c] == 1) {
                    //look for the biggest region based on all regions in grid
                    //Two neigbouring cells will both show their region size here
					maxRegion = Math.max(maxRegion, countRegion(matrix, visited, r, c));
				}
			}
		}
		System.out.println(maxRegion);

		sc.close();
	}

	static int countRegion(int[][] matrix, boolean[][] visited, int r, int c) {
		int row = matrix.length;
		int col = matrix[0].length;

        //off the grid or not an unvisited 1
		if (!(r >= 0 && r < row && c >= 0 && c < col) || !(matrix[r][c] == 1 && !visited[r][c])) {
			return 0;
		}

        //mark cell as visited
		visited[r][c] = true;

        //at least one 1 in region initially
		int region = 1;
		for (int i = 0; i < R_OFFSETS.length; i++) {
            //increment region based on neighbouring 1's. Everything but newly visited 1's fail to increment region
			region += countRegion(matrix, visited, r + R_OFFSETS[i], c + C_OFFSETS[i]);
		}
		return region;
	}
}